/**
Name: myHandlerName

Type: function -- can also be: command, message, handler, property, library, or module

Syntax: myHandlerName(<pParam>, [<pOptionalParam>])

Summary:  Get the info about the pParam thing with optional pOptionalParam

Introduced: 1.0

OS: mac,win,linux,ios,android

Platforms: desktop, mobile

Associated: myExtensionLib

Related: myRelatedFunctionA(handler), myOtherFunctionB(handler)

References:
myRelatedFunctionA(handler), myOtherFunctionB(handler),
	myGlossaryTerm(glossary)


Edition: -- Maybe we don't need this tag anymore? Instead...
--- I intend to add a new docs metadata tag 'Dialect:' for use to indicate
-- compatibility with the various 'dialects' of xTalk interpreting engines.
Dialects: xTalk (all), HyperTalk (1.x), HyperTalk (2.x)
 -- options would be like: xTalk (basic) because the handler(s) use very
 -- common, basic xTalk such as 'on mouseUp' or 'put x into fld 1'), HyperTalk,
 -- MetaTalk,RunRev,LiveCode, SuperTalk, XION, Hammer (used in StackSmith), and
 -- Gain Momentum (language name?), MediaTalk, etc. whatever too if anyone wants
 -- to add to it.
 -- OR...
 -- Perhaps it would be better if we just had language level categories such as:
 -- xTalk Gen 1 (for HyperTalk 1.2 or HyperCard GS compatiable),
 -- xTalk Gen 2 (HC 2.4 compatible)
 -- xTalk Gen 3 (MetaTalk, XION, etc. compatible. The handlers might use
 -- some 'extended' or modern xTalk feature, such as color features or case/switch
 -- control structures which HyperTalk didn't natively have throughout
 -- it's 11 or so years of support, or anything otherwise making the handlers
 -- non-backward compatible to level 1 or 2.
 -- I imagine that most scripts in a UI orented stack would fall under level 1 or 2.
 -- Paul McClernan 2/17/22

Example:
put "The Data:" &cr& myHandlerName("param 1 thing","")

Parameters:
pParamA:  The first param the handler expects
pOptionalParam: This is an example Optional Parameter

Returns:  The data you want!

The result: An error string if an error occurred

It: the data returned

Description:
This is an inline 'lcdoc' markup example which can be used as a template for
documenting actual handlers in a script library or in Extension Builder code.
These tags are read by the docs parser library of the IDE and subsequently
loaded into the IDE Syntax Dictionary when a library extention
is installed using the IDE's Extention Builder stack.

Tags: xTalk, template, metadata
**/
