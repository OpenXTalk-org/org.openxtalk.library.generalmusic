script "openxtalk.library.generalmusic"
/*
OpenXTalk.org GPL v3
*/

metadata SVGIcon="M183.02,94.85h-42.89c-1.25-6.3-5.02-8.74-11.32-9.1c-0.24-2.77,0.07-5.48-0.81-7.71c-0.89-2.25-2.6-4.7-4.63-5.8 c-1.96-1.07-2.76-1.91-3.07-4.08c-1.48-10.39-5.4-9.46-12.77-10.21c-0.13-0.01-0.27-0.09-0.51-0.19c-0.88-3.23-1.4-6.69-2.78-9.76 c-1.43-3.19-3.7-6-5.67-9.09c6.25-8.21,6.23-15.21,0.45-23.67c-2.74-4-6.09-4.65-10.04-3.17c-2.81,1.06-5.32,2.93-7.82,4.35 c-2.14-2.33-3.82-5.51-6.44-6.77C67.2,6.01,59.52,1.36,51.5,0.41C38.72-1.11,25.92,1.71,14.1,7.36 C7.05,10.73,1.75,16.05,0.18,23.88c-0.65,3.22,0.68,6.8,0.72,10.22c0.04,2.68-1.23,14.53,0.41,17.8c2.04,4.08,3.96,4.96,7.32,5.73 c3.86,0.88,8.18-2.94,8.18-6.97c0-10.94-10.05-14.18-11.67-15.87c2.56-2.44,4.72-9.34,4.72-9.34L22,26.57c0,0-1.24,6.93,5.11,8.37 c1.35,2.49,3.71,13.6,3.99,14.93c0.97,4.77,4.53,8.18,8.24,11.53c-10.42,5.78-11.22,10.28-2.82,19.04 c6.35,6.62,11.76,8.72,20.62-1.8c2.98,4.77,6.51,8.79,12.77,8.22c1.93-0.18,3.85-0.49,5.77-0.72c4.61-0.53,8.18,0.62,10.09,5.41 c0.52,1.3,1.81,2.55,3.11,3.3c0,0-7.1,0.39-11.44,0.96c-4.34,0.57-21.14,7.79-21.3,14.75c-0.75,33.18-1.24,68.68-1.77,101.87 c-0.04,2.66,0.49,5.34,0.83,8c0.58,4.47,2.63,6.57,7.68,6.6c27.21,0.17,54.42,0.86,81.63,1.07c10.75,0.08,21.5-0.74,32.25-0.94 c1.79-0.03,2.97-0.49,3.75-1.3l0,0.55l16.11-16.26c0,0,1.1-110.71,0-113.17S183.02,94.85,183.02,94.85z M122.59,81.24 c1.2,2.82-2.61,12.18-4.38,13.61s-8.21,6.95-12.09,7.25c-0.97,0.08-8.17,0.04-8.34,0.01c-0.56-0.09-0.67-0.86-0.67-1.95 s2.27-4.14,3.35-5.31c0.45-0.61,0.91-1.19,1.42-1.74c3.56-3.8,7.8-6.96,11.46-10.68C116.17,79.57,121.39,78.42,122.59,81.24z M76.19,81.61c-7.46,1.48-13.1-1.01-17.7-6.72c-1.12-1.39-2.4-2.64-4.02-4.39c-2.07,4.27-2.22,10.76-7.94,9.57 c-3.94-0.82-9.1-4.51-10.2-8.02c-1.34-4.28,3.6-7.15,8.3-8.32c-2.21-3.89-4.43-7.48-6.33-11.24c-2.54-5.04-1.93-10.08,1.71-14.24 c7.85-8.97,17.65-15.04,29.15-18.26c2.69-0.75,4.79-0.14,6.67,2.23c1.47,1.85,3.69,3.11,5.76,4.77c1.45-2.56,2.16-4.62,3.53-6.03 c1.6-1.64,3.78-3.79,5.73-3.8c4.28-0.04,5.48,4.11,6.88,7.31c1.19,2.73,1.96,5.75-1.05,8.15c-4.8,3.81-4.97,4.15-1.26,9.06 c4.9,6.48,6.72,13.51,4.89,21.46C97.75,74.28,91.32,78.6,76.19,81.61z M87.79,84.94c2.89-1.49,5.26-2.97,7.81-3.98 c4.65-1.84,7.52-4.92,8.78-9.87c1.16-4.54,2.21-9.65,9.04-9.12c1.32,5.38,1.39,10.32-2.96,14.77c-4.16,4.25-7.66,9.15-11.85,13.38 c-2.66,2.69-5.46,0.39-7.81-1.21C89.77,88.2,89.19,86.82,87.79,84.94z M177.84,220.47c-2.7,1.92-112.97,2.65-115.62,0 c-3.69-3.69-1.42-108.05,1.33-110.81c2.75-2.75,114.75-1.09,116.96,0C182.81,110.79,182.84,216.91,177.84,220.47z M133.27,98.89c1.3-1.3,1.69-2.67,1.21-4.04c-0.12-0.35-0.3-0.7-0.54-1.05c-0.02-0.03-0.04-0.06-0.06-0.09 c-0.15-0.22-0.33-0.44-0.53-0.66c-1.91-2.05-4.04-1.7-5.93-0.1c-0.74,0.63-1.47,1.27-2.19,1.91c-2.8,2.47-5.55,5-8.33,7.5 C122.79,102.41,129.81,102.35,133.27,98.89z M110.84,162.53c5.75,1.97,11.38,1.96,17.1-0.04c12.67-4.43,25.37-8.77,38.05-13.17c1.23-0.43,2.4-1,4.43-1.86 c-15.47-5.03-30.04-9.86-44.69-14.44c-2.48-0.77-5.52-1.18-7.93-0.49c-15.98,4.58-31.85,9.5-47.76,14.31 c0.04,0.67,0.09,1.35,0.13,2.02C83.72,153.41,97.3,157.9,110.84,162.53z M125.77,174.07c14.39-4.46,28.6-9.46,43.69-14.54c-7.56-3.98-7.56-4-14.35-1.78c-7.66,2.51-15.38,4.87-22.95,7.63 c-8.68,3.16-17.15,3.11-25.82-0.06c-7.99-2.92-16.12-5.43-24.2-8.1c-5.26-1.74-7.69-1.22-12.85,2.93c15.19,4.91,30,9.95,45,14.35 C117.81,175.53,122.21,175.17,125.77,174.07z M127.98,184.94c12.67-4,25.16-8.57,37.7-12.94c0.97-0.34,1.86-0.92,2.99-1.49c-4.68-3.2-9.01-3.48-13.89-1.56 c-6.8,2.68-13.86,4.68-20.72,7.24c-9.81,3.66-19.5,3.66-29.32,0.05c-7.01-2.58-14.2-4.66-21.14-7.4c-4.76-1.88-8.92-1.4-14.09,2.01 c15.83,5.38,30.67,10.8,45.78,15.31C119.1,187.28,123.98,186.21,127.98,184.94z M156.11,179.31c-7.37,2.86-14.98,5.06-22.41,7.78c-9.96,3.65-19.79,3.63-29.75-0.04c-7.28-2.68-14.76-4.83-21.98-7.66 c-4.62-1.81-8.29-0.32-12.46,1.87c0.67,0.45,0.96,0.74,1.31,0.86c13.94,4.89,27.8,10.02,41.87,14.49 c3.63,1.15,8.22,1.24,11.84,0.11c14.66-4.55,29.11-9.77,44.21-14.94C164.4,179.22,160.82,177.48,156.11,179.31z M76.66,49.91c-0.15-4.72-5.02-8.97-10.11-8.84c-3.94,0.1-7.78,4.25-7.74,8.36c0.04,4.45,4.59,8.58,9.33,8.48 C72.92,57.81,76.79,54.17,76.66,49.91z M83.66,55.29c-0.46,7.77-2.59,9.63-10.5,10.24c-1.16,0.09-2.32,0.3-3.74,0.48c0,1.87,0,3.57,0,5.74 c6.3-0.85,13.32,2.52,18.11-3.67c3.98-5.13,3.39-11.23,2.35-17.21C86.15,50.7,83.9,51.26,83.66,55.29z M50.3,40.56c-3.25-0.8-4.54,5.87-4.54,5.87s0.62,6.34,1.58,7.65c0.96,1.3,3.4,2.35,3.84,1.73 c1.78-2.52,3.03-5.42,4.88-8.95C53.94,44.4,52.46,41.09,50.3,40.56z M63.6,35.37c0.99,0.75,10.96-0.78,11.41-1.86c0.4-0.98-0.71-2.99-1.69-4.05c-2.6-2.8-6.02-4.12-9.68-2.72 c-1.43,0.55-3.21,2.68-3.15,4.01C60.57,32.38,62.15,34.27,63.6,35.37z"


on extensionInitialize
   if the target is not me then
      pass extensionInitialize
   end if

   insert the script of me into back

   if the environment contains "development" then
      set the _ideoverride of me to true
   end if

   __Initialize
end extensionInitialize

on extensionFinalize
   if the target is not me then
      pass extensionFinalize
   end if

   remove the script of me from back
end extensionFinalize

/**
Title: Play Sentence Library

Version: 1.0.0

Author: OpenXTalk.org

Description:
This script library implements...
*/

local sMIDIFileData

/**

The MIME version this implemented in the library

Example:
put "MIME-Version:" && mimeTheMIMEVersion() & crlf after tHeaders

Description:
Use the <mimeTheMIMEVersion> function create a `MIME-Version` header.

*/

function playSentenceVersion
   return "1.0"
end playSentenceVersion


private command __Initialize

end __Initialize


---- makeSMF (PM modded version) ---
-- originally by UDI --


-- This is a library of the makeSMF.
-- This script was inserted in frontScript at openStack ( see stack script )

--on closeCard
--  playPmd "Clear" -- stop music & delete temporary mid file
--end closeCard

----------------playPmd script by UDI 2002.12.08-------------
-- playPmd notes, playTempo, defInst
-- param 1 notes = Score string to play or make SMF.
---- if "stop" is passed then stop current music, and enable "play" btn, disable "stop" btn.
---- if "clear" is passed then do "stop" job, and delete temporary mid file.
-- param 2 playTempo = makeSMF's 2nd param.
-- param 3 defInst = makeSMF's 3rd param.
-- This handler need "makeSMF" handler.
-----------------------------------------------------
-- 2002.10.03 idle -> send-in
-- 2002.12.06 tempFile in TemporaryFolder
-----------------------------------------------------

on playPMD_AVMIDIPlayer notes, playTempo, instNum
   -- set dontUseQT to false -- long time Deprecated now -- PM 2/10/22
   put specialFolderPath( "Temporary" ) & "/playPmdTemp.mid" into tempFilePath
   if ( notes is "stop" ) or ( notes is "clear" ) then
      try
         -- play stop vc tempFilePath
         AVMIDIplayerStop
      end try
      if notes is "clear" then
         delete file tempFilePath
      end if
      --setPlayBtn false
   else
      try
         AVMIDIplayerStop
         -- stop playing vc tempFilePath
      end try
      makeSMF notes, playTempo, instNum, tempFilePath
      -- play vc tempFilePath
      put tempFilePath into cd fld "MIDIfilePath"
      put FilePathToFileURL(tempFilePath) into cd fld "MIDIfileURL"
      AVMIDIPlayerLoad tempFilePath, cd fld "SoundFontFilePath"
      set the thumbPosition of scrollbar "ScrubberBar" to 0
      set the endValue of scrollbar "ScrubberBar" to AVMIDIPlayerDuration()
      put SecsToHrsMinSecs(0) into fld "FileCurrentPosition"
      put SecsToHrsMinSecs(AVMIDIPlayerDuration()) into fld "FileDuration"
      AVMIDIPlayerSetRate(the thumbPosition of scrollbar "Playback Rate")
      lock screen
      -- AVMIDIPlayerPlay
      AVMIDIPlayerPlayWithCallback
      playPositionCheck
   end if
end playPMD_AVMIDIPlayer

on checkPlayEnd
  if movie() is "done" then
    setPlayBtn false
  else
    send "checkPlayEnd" to me in 30 ticks
  end if
end checkPlayEnd

on setPlayBtn toPlay
  try
    set the enabled of btn "Play" to ( not toPlay )
  end try
  try
    set the enabled of btn "Stop" to ( toPlay )
  end try
end setPlayBtn
----------------end of playPmd-------------


----------------makeSMF script by UDI 2002.12.06-------------
-- makeSMF notes, [ playTempo ], [ defInst ], savePath
-- param 1 notes = Score string to play or make SMF.
-- param 2 optional playTempo = Default play tempo.
---- This parameter is adopted if there is not a header ( '//pmd' ) in 'notes'.
-- param 3 optional defInst = Default pay instrument number.
---- This parameter is adopted if there is not a header ( '//pmd' ) in 'notes'.
-- param 4 savePath = Full path or the file name of a MIDI file to make.
-----------------------------------------------------
-- 2002.07.14 first release
-- 2002.07.15 pedal problem fixed
-- 2002.10.03 global var -> local var
-- 2002.12.06 modifyed evList2Midi
-----------------------------------------------------
local makeSmfNotes, makeSmfEvList, makeSmfWord
local makeSmfAbsT, makeSmfChannel, makeSmfAbsPart
local makeSmfOctave, makeSmfDur, makeSmfVelocity, makeSmfGRate
local makeSmfModuration, makeSmfExp, makeSmfHoldd, makeSmfAltArry, makeSmfKeyShift


on makeSMF notes, playTempo, defInst, savePath
  put playSentenceToMIDIData( notes, playTempo, defInst ) into midiEvents
  set the cursor to watch
  set the fileType to "MGRpMidi" -- MIDIGraphy (C)TONTATA
  --set the fileType to "TVODMidi" -- QuickTime Player
  --
  set the itemDel to "."
  if last item of savePath is not "mid" then
    put ".mid" after savePath
  end if
  --
  open file savePath for binary write
  write midiEvents to file savePath
  close file savePath
end makeSMF

/**


*/
function playSentenceToMIDIData notes, playTempo, defInst
  set the cursor to watch
  --
  if line 1 of notes contains "//pmd" then
    -- exist header
    put line 1 of notes into pmdHeader
    if item 3 of pmdHeader > 0 then
      put item 3 of pmdHeader into playTempo
    end if
    if item 4 of pmdHeader > 0 then
      put item 4 of pmdHeader into defInst
    end if
  end if
  if playTempo is "" then put 100 into playTempo
  if defInst is "" then put 1 into defInst
  --
  put getCopyrightBin( notes ) into midiEvents
  put getInfoBin( notes ) after midiEvents
  put getTimeSignBin( notes ) after midiEvents
  --
  put binaryEncode( "H*", "00FF54054000000000" ) after midiEvents -- SMTPE offset
  put binaryEncode( "H*", "00FF5103" ) & num2Bin( 590000 *100 div playTempo, 3) after midiEvents
  put binaryEncode( "H*", "00B07900" ) after midiEvents -- reset all controler( CC#121 = 0 )
  --
  put notes2EvList( notes, defInst, playTempo ) into evList
  set the cursor to watch
  sort lines of evList
  put evList2Midi( evList ) after midiEvents
  --
  put getMidiHeader( length( midiEvents ) ) before midiEvents
  --
  return midiEvents
end playSentenceToMIDIData


function notes2EvList notes, defInst, playTempo
  put notes into makeSmfNotes
  put "" into makeSmfEvList
  --
  put 0 into aPart
  put 0 into makeSmfChannel
  initPart
  put false into existPart1Init
  --
  put 0 into cursorCount
  repeat
    if cursorCount = 40 then --2002.12.06
      set the cursor to busy
      put 0 into cursorCount
    else
      add 1 to cursorCount
    end if
    put word 1 of makeSmfNotes into makeSmfWord
    --
    if makeSmfWord is "" then exit repeat
    --
    put first char of makeSmfWord into aChar
    -- Note -----------------
    if "CDEFGAB123456789" contains aChar then -- pitch name
      if aPart = 0 then
        if existPart1Init is false then -- first part with no $
          put true into existPart1Init
          if defInst >= 16384 then put 9 into makeSmfChannel
          put getInitHex( makeSmfChannel, defInst ) after makeSmfEvList
        end if
      end if
      -- pitch
      put getPitch() into aPitch
      -- Duration
      put getDur( false ) into aDur
      if aDur > 0 then put aDur into makeSmfDur
      -- gate time
      put getGRate() into aGRate
      if aGRate > 0 then put aGRate into makeSmfGRate
      -- velocity
      put getVelocity() into aVelocity
      if aVelocity > -1 then put aVelocity into makeSmfVelocity
      -- set note
      put abstT2Str( makeSmfAbsT ) & "," & note2Hex( makeSmfChannel, aPitch, makeSmfVelocity ) & return after makeSmfEvList
      put abstT2Str( makeSmfAbsT + ( makeSmfDur * makeSmfGRate div 10 )*100 ) & "," & note2Hex( makeSmfChannel, aPitch, 0 ) & return after makeSmfEvList
      add makeSmfDur *100 to makeSmfAbsT
      delete first word of makeSmfNotes
      next repeat
    end if
    -- Chord -----------------
    if aChar is "(" then
      if aPart = 0 then
        if existPart1Init is false then -- first part with no $
          put true into existPart1Init
          if defInst >= 16384 then put 9 into makeSmfChannel
          put getInitHex( makeSmfChannel, defInst ) after makeSmfEvList
        end if
      end if
      -- delete word at first
      put char 1 to ( offset( ")", makeSmfNotes ) ) -1 of makeSmfNotes into chordWord
      delete char 1 to ( offset( "(", chordWord ) ) of chordWord
      delete char 1 to ( offset( ")", makeSmfNotes ) ) of makeSmfNotes
      put first char of makeSmfNotes into aChar
      put "" into chordProp
      if ( aChar <> " " ) and ( aChar <> return ) and ( aChar <> lineFeed ) then
        put first word of makeSmfNotes after chordProp
        delete first word of makeSmfNotes
      end if
      -- chord init
      get "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
      put it into wP
      put it into wS
      put it into wG
      get "-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"
      put it into wV
      -- read each note
      repeat with N = 1 to 32
        put word 1 of chordWord into makeSmfWord
        if makeSmfWord is "" then exit repeat
        -- each pitch
        put getPitch() into item N of wP
        -- each Duration
        put getDur( false ) into aDur
        if aDur > 0 then put aDur into item N of wS
        -- each gate time
        put getGRate() into aGRate
        if aGRate > 0 then put aGRate into item N of wG
        -- each velocity
        put getVelocity() into aVelocity
        if aVelocity > -1 then put aVelocity into item N of wV
        --
        delete first word of chordWord
      end repeat
      put chordProp into makeSmfWord
      -- chord Duration
      put getDur( false ) into aDur
      if aDur > 0 then put aDur into makeSmfDur
      -- chord gate time
      put getGRate() into aGRate
      if aGRate > 0 then put aGRate into makeSmfGRate
      -- chord velocity
      put getVelocity() into aVelocity
      if aVelocity > -1 then put aVelocity into makeSmfVelocity
      -- set
      repeat with N =1 to 32
        put item N of wP into aPitch
        if aPitch = 0 then next repeat
        put item N of wS into aStep
        if aStep = 0 then put makeSmfDur into aStep
        put item N of wG into aGRate
        if aGRate = 0 then put makeSmfGRate into aGRate
        put item N of wV into aVelocity
        if aVelocity = -1 then put makeSmfVelocity into aVelocity
        -- set note
        put abstT2Str( makeSmfAbsT ) & "," & note2Hex( makeSmfChannel, aPitch, aVelocity ) & return after makeSmfEvList
        put abstT2Str( makeSmfAbsT + ( aStep * aGRate div 10 )*100 ) & "," & note2Hex( makeSmfChannel, aPitch, 0 ) & return after makeSmfEvList
      end repeat
      add makeSmfDur *100 to makeSmfAbsT
      next repeat
    end if
    -- Rest -----------------
    if ( aChar is "R" ) or ( aChar is "0" ) then
      delete first char of makeSmfWord
      put getDur( false ) into aDur
      if aDur > 0 then put aDur into makeSmfDur
      add makeSmfDur *100 to makeSmfAbsT
      delete first word of makeSmfNotes
      next repeat
    end if
    -- Set note prop command------------------
    -- Octave
    if aChar is "O" then
      delete first char of makeSmfWord
      put getNum( 4 ) into makeSmfOctave
      delete first word of makeSmfNotes
      next repeat
    end if
    -- Duration
    if aChar is "L" then
      delete first char of makeSmfWord
      put getDur( false ) into aDur
      if aDur > 0 then put aDur into makeSmfDur
      else put name2Dur( "q" ) into makeSmfDur
    end if
    -- GateTime
    if aChar is "@" then
      delete first char of makeSmfWord
      put getNum(10) into aGRate
    end if
    -- Velocity
    if aChar is "V" then
      delete first char of makeSmfWord
      put getVelocity() into aVelocity
      if aVelocity > -1 then put aVelocity into makeSmfVelocity
      else put 127 into makeSmfVelocity
    end if
    -- Controls -----------------
    if aChar is "P" then -- Panpot
      setPanEvent
      delete first word of makeSmfNotes
      next repeat
    end if
    if aChar is "M" then -- Moduration
      setModurationEvent
      delete first word of makeSmfNotes
      next repeat
    end if
    if aChar is "Z" then -- Z Reverb
      setRevervEvent
      delete first word of makeSmfNotes
      next repeat
    end if
    if aChar is "H" then -- H Pedal Hold
      setPedalEvent
      delete first word of makeSmfNotes
      next repeat
    end if
    if aChar is "Y" then -- Y Expression
      setExpressionEvent
      delete first word of makeSmfNotes
      next repeat
    end if
    -- Tempo -----------------
    if aPart = 0 then
      if aChar is "T" then -- T Tempo
        delete first char of makeSmfWord
        put getNum( 100 ) into aTempo
        put 590000 *100 div playTempo * 100 div aTempo into aNum
        put abstT2Str( makeSmfAbsT ) & "," & "FF5103" & num2Hex( aNum, 6 ) & return after makeSmfEvList
        delete first word of makeSmfNotes
        next repeat
      end if
    end if
    -- / comments ------------------
    if ( aChar is "/" ) or ( aChar is "|" ) then
      put char 2 of makeSmfWord into aChar
      if ( aChar is "/" ) or ( aChar is "|" ) then -- // line comment
        delete first line of makeSmfNotes
        next repeat
      end if
      if aChar is "*" then -- /* block comment */
        put offset( "*/", makeSmfNotes ) into aOfs
        if aOfs = 0 then
          put offset( "*|", makeSmfNotes ) into aOfs
        end if
        delete char 1 to aOfs +1 of makeSmfNotes
        next repeat
      end if
      delete first word of makeSmfNotes
      next repeat
    end if
    -- Alternate & shift ------------------
    if aChar is "#" then -- sharp alternate
      delete first char of makeSmfWord
      put 1 into altShift
      if first char of makeSmfWord is "#" then -- double sharp
        delete first char of makeSmfWord
        put 2 into altShift
      end if
      setAltShift makeSmfWord, altShift
      delete first word of makeSmfNotes
      next repeat
    end if
    if aChar is "_" then -- flat alternate
      delete first char of makeSmfWord
      put -1 into altShift
      if first char of makeSmfWord is "_" then -- double flat
        delete first char of makeSmfWord
        put -2 into altShift
      end if
      setAltShift makeSmfWord, altShift
      delete first word of makeSmfNotes
      next repeat
    end if
    if aChar is "^" then -- natural alternate
      delete first char of makeSmfWord
      setAltShift makeSmfWord, altShift
      delete first word of makeSmfNotes
      next repeat
    end if
    if aChar is "~" then -- key shift
      delete first char of makeSmfWord
      put getNN( 0 ) into makeSmfKeyShift
      delete first word of makeSmfNotes
      next repeat
    end if
    -- $ part ------------------
    if aChar is "$" then
      -- init part
      initPart
      --
      delete first char of makeSmfWord
      put getNum( defInst ) into instNum
      --
      if ( aPart = 0 ) and ( makeSmfEvList = "" ) then
        put true into existPart1Init
      else
        if makeSmfChannel <> 9 then
          add 1 to aPart
        end if
      end if
      -- init channel
      if instNum >= 16384 then
        put 9 into makeSmfChannel
        put max( 0, ( aPart -1 ) ) into aPart
      else
        if aPart = 9 then put 10 into aPart
        put aPart into makeSmfChannel
      end if
      put getInitHex( makeSmfChannel, instNum ) after makeSmfEvList
      -- part volume
      if first char of makeSmfWord is "V" then
        delete first char of makeSmfWord
        put trunc( getNum( -1 ) *12.7 ) into aVol
        if ( aVol < 0 ) or ( aVol > 127 )  then put 127 into aVol
        put abstT2Str( makeSmfAbsT ) & "," & ctrl2Hex( aPart, 7, aVol ) & return after makeSmfEvList
      end if
      delete first word of makeSmfNotes
      next repeat
    end if
    -- other ------------------
    delete first word of makeSmfNotes
  end repeat
  --
  put makeSmfEvList into evList
  put "" into makeSmfEvList
  return evList
end notes2EvList

--

on initPart
  put 4 into makeSmfOctave
  put name2Dur( "q" ) into makeSmfDur
  put 127 into makeSmfVelocity
  put 10 into makeSmfGRate
  put 0 into makeSmfModuration
  put 127 into makeSmfExp
  put 0 into makeSmfHold
  put "0,0,0,0,0,0,0" into makeSmfAltArry
  put 0 into makeSmfKeyShift
  put 10 into makeSmfAbsT
end initPart

function getDur noDivFlag
  put 0 into aDur
  repeat
    put first char of makeSmfWord into aChar
    if not ( "whqestx" contains aChar ) then exit repeat
    put name2Dur( aChar ) into oneDur
    delete first char of makeSmfWord
    -- dotted
    put oneDur div 2 into harfDur
    repeat 8
      if first char of makeSmfWord is "." then
        delete first char of makeSmfWord
        add harfDur to oneDur
        put harfDur div 2 into harfDur
      else
        exit repeat
      end if
    end repeat
    if noDivFlag is not true then
      -- divided beat
      put first char of makeSmfWord into aChar
      if aChar is "/" then
        delete first char of makeSmfWord
        put (oneDur div ( first char of makeSmfWord )) into oneDur
        delete first char of makeSmfWord
      else
        if "23456789" contains aChar then
          put aChar into ren
          delete first char of makeSmfWord
          if first char of makeSmfWord <> "." then
            put (oneDur*(2^trunc(log2(ren))) div ren) into oneDur
          else
            delete first char of makeSmfWord
            put trunc(oneDur*(2^trunc(log2(ren*(2/3))))/ren*3/2) into oneDur
          end if
        end if
      end if
    end if
    add oneDur to aDur
  end repeat
  return aDur
end getDur

function getGRate
  if first char of makeSmfWord is "@" then
    delete first char of makeSmfWord
    return getNum(10)
  else
    return 0
  end if
end getGRate

function getVelocity
  if first char of makeSmfWord is "v" then
    delete first char of makeSmfWord
    put trunc( getNum( 10 ) * 12.7 ) into aVelocity
    if aVelocity > 127 then put 127 into aVelocity
    return aVelocity
  else
    return -1
  end if
end getVelocity

function getNN dflt -- signed number
  if first char of makeSmfWord is "-" then
    put true into nFlag
    delete first char of makeSmfWord
  else
    put false into nFlag
  end if
  put getNum( dflt ) into aNum
  if nFlag then
    return - aNum
  else
    return aNum
  end if
end getNN

function getNum dflt
  put "" into aResult
  get offset( first char of makeSmfWord, "0123456789" ) -1
  if it = -1 then return dflt
  delete first char of makeSmfWord
  put it into aResult
  repeat
    get offset( first char of makeSmfWord, "0123456789" ) -1
    if it = -1 then exit repeat
    delete first char of makeSmfWord
    put it after aResult
  end repeat
  return aResult
end getNum

on setAltShift aWord, altShift --2002.12.06
  repeat for each char aChar in aWord
    get offset( aChar, "CDEFGAB" )
    if it > 0 then
      put altShift into item it of makeSmfAltArry
    end if
  end repeat
end setAltShift

--

on setPanEvent
  put makeSmfAbsT into absT
  delete first char of makeSmfWord
  put trunc( getNum( 5 ) *12.7 ) into aNum
  put abstT2Str( absT ) & "," & ctrl2Hex( makeSmfChannel, 10, aNum ) & return after makeSmfEvList
  add 1 to makeSmfAbsT
  repeat
    put getDur( true ) into aDur
    if aDur = 0 then exit repeat
    add aDur *100 to absT
    put trunc( getNum( 5 ) *12.7 ) into aNum
    put abstT2Str( absT ) & "," & ctrl2Hex( makeSmfChannel, 10, aNum ) & return after makeSmfEvList
  end repeat
end setPanEvent

on setModurationEvent
  put makeSmfAbsT into absT
  delete first char of makeSmfWord
  if not ( "whqest1234567890" contains ( first char of makeSmfWord ) ) then
    put abstT2Str( absT ) & "," & ctrl2Hex( makeSmfChannel, 1, 0 ) & return after makeSmfEvList
    put 0 into makeSmfChannel
  end if
  repeat
    put makeSmfWord into thisWord
    put getDur( true ) into eDur
    put getNum( 0 ) into tgV
    if makeSmfWord is thisWord then
      put  tgV into makeSmfModuration
      exit repeat
    end if
    doSetCtrl absT, eDur, trunc(makeSmfModuration*12.7), trunc(tgV*12.7), 8, 1
    put tgV into makeSmfModuration
    add eDur *100 to absT
  end repeat
end setModurationEvent

on setRevervEvent
  delete first char of makeSmfWord
  if getNum( 0 ) = 1 then put 96 into aNum
  else put 0 into aNum
  put abstT2Str( makeSmfAbsT ) & "," & ctrl2Hex( makeSmfChannel, 91, aNum ) & return after makeSmfEvList
  add 1 to makeSmfAbsT
end setRevervEvent

on setPedalEvent
  delete first char of makeSmfWord
  put getNum(0) into aNum
  if aNum > 0 then
    if makeSmfHold > 0 then
      put abstT2Str( makeSmfAbsT ) & "," & ctrl2Hex( makeSmfChannel, 64, 0 ) & return after makeSmfEvList
      add 1 to makeSmfAbsT
      --2002.07.15 delete first char of makeSmfWord
    end if
    put 96 into aNum
  end if
  put aNum into makeSmfHold
  put abstT2Str( makeSmfAbsT ) & "," & ctrl2Hex( makeSmfChannel, 64, aNum ) & return after makeSmfEvList
  add 1 to makeSmfAbsT
  --
  put getDur( true ) into aDur
  if aDur > 0 then
    put abstT2Str( makeSmfAbsT + aDur *100 ) & "," & ctrl2Hex( makeSmfChannel, 64, 0 ) & return after makeSmfEvList
  end if
end setPedalEvent

on setExpressionEvent
  put makeSmfAbsT into absT
  delete first char of makeSmfWord
  if first char of makeSmfWord is " " then
    put trunc( getNum( 10 ) *12.7 ) into makeSmfExp
    put abstT2Str( absT ) & "," & ctrl2Hex( makeSmfChannel, 11, makeSmfExp ) & return after makeSmfEvList
  else
    put getNum(-1) into aExp
    if aExp > -1 then put trunc( aExp * 12.7 ) into makeSmfExp
    put abstT2Str( makeSmfAbsT ) & "," & ctrl2Hex( makeSmfChannel, 11, makeSmfExp ) & return after makeSmfEvList
    put makeSmfAbsT into absT
    repeat
      put getDur( true ) into eDur
      put min( 127, trunc( getNum( 10 ) *12.7 ) ) into tgV
      if eDur = 0 then exit repeat
      doSetCtrl absT, eDur, makeSmfExp, tgV, 4, 11
      put tgV into makeSmfExp
      add eDur *100 to absT
    end repeat
  end if
end setExpressionEvent

on doSetCtrl topT, eDur, curV, tgV, minGap, ctrlN -- env
  put topT into absT
  put tgV into tgVal
  put max( 1, eDur div 10 ) into stepN
  put tgV * 100 into tgV -- bias 10
  put curV *100 into curV -- bias 10
  put ( ( tgV - curV ) div stepN ) into stepV
  repeat with n =1 to stepN-1
    add 10 *100 to absT
    put curV div ( minGap *100 ) into oldV
    add stepV to curV
    if ( stepV >0 and curV >tgV ) or ( stepV <0 and curV <tgV ) then
      exit repeat
    end if
    if curV div ( minGap *100 ) <> oldV then
      put abstT2Str( absT ) & "," & ctrl2Hex( makeSmfChannel, ctrlN, curV div 100 ) & return after makeSmfEvList
    end if
  end repeat
  put abstT2Str( topT + eDur *100 -1 ) & "," & ctrl2Hex( makeSmfChannel, ctrlN, tgVal ) & return after makeSmfEvList
end doSetCtrl

--
--##
function note2Hex pPart, aPitch, aVelocity -- note on/off  $90+pPart
  return bin2Hex( numToByte( 144 + pPart ) & numToByte( aPitch ) & numToByte( aVelocity ) )
end note2Hex

function ctrl2Hex pPart, ctrlN, tmakeSmfDur -- control change $B0+pPart
  return bin2Hex( numToByte( 176 + pPart ) & numToByte( ctrlN ) & numToByte( tmakeSmfDur ) )
end ctrl2Hex

function pc2Hex pPart, instNum -- program change  $C0+pPart
  return bin2Hex( numToByte( 192 + pPart ) & numToByte( instNum ) )
end pc2Hex

function name2Dur aChar
  return 960 div 2^( offset( aChar, "whqestx" ) -1 )
end name2Dur

--

function getPitch
  put first char of makeSmfWord into aChar
  if "CDEFGAB" contains aChar then -- pitch name
    put offset( aChar, "C D EF G A B" ) -1 into aPitch
    put item ( offset( aChar, "CDEFGAB" ) ) of makeSmfAltArry into altShift
    delete first char of makeSmfWord
    -- accidental
    put false into existAccidental
    if first char of makeSmfWord is "#" then
      put true into existAccidental
      delete first char of makeSmfWord
      add 1 to aPitch
      if first char of makeSmfWord is "#" then
        delete first char of makeSmfWord
        add 1 to aPitch
      end if
    end if
    if ( first char of makeSmfWord is "b" ) or ( first char of makeSmfWord is "_" ) then
      put true into existAccidental
      delete first char of makeSmfWord
      subtract 1 from aPitch
      if ( first char of makeSmfWord is "b" ) or ( first char of makeSmfWord is "_" ) then
        delete first char of makeSmfWord
        subtract 1 from aPitch
      end if
    end if
    if first char of makeSmfWord is "^" then
      put true into existAccidental
      delete first char of makeSmfWord
    end if
    if existAccidental is false then
      add altShift to aPitch
    end if
    add makeSmfKeyShift to aPitch
    -- octave
    put getNum( -1 ) into aNum
    if aNum > -1 then put aNum into makeSmfOctave
    add ( makeSmfOctave +1 ) *12 to aPitch
    return aPitch
  else -- pitch number
    return getNum( 0 )
  end if
end getPitch

function bin2Hex evStr
  put "" into theHex
  get binaryDecode( "H*", evStr, theHex )
  return theHex
end bin2Hex

function abstT2Str absT
  return char 1 to ( 10- length( absT ) ) of "0000000000" & absT
end abstT2Str

--

function evList2Midi evList -- 2002.12.06
  put "" into midiEvents
  put 0 into oldT
  repeat for each line theLine in evList
    -- delta time
    put ( item 1 of theLine ) div 100 into absT
    put absT - oldT into deltaT
    put absT into oldT
    if deltaT > 127 then
      put numToByte( 128 + deltaT div 128 ) after midiEvents
      put numToByte( deltaT mod 128 ) after midiEvents
    else
      put numToByte( deltaT ) after midiEvents
    end if
    -- event
    put binaryEncode( "H*", item 2 of theLine ) after midiEvents
  end repeat
  -- end marker
  put binaryEncode( "H*", "00FF2F00" ) after midiEvents
  return midiEvents
end evList2Midi

--

function getInitHex aPart, instNum
  put "" into resultHex
  --
  put num2Hex( aPart, 1 ) into partHex
  if instNum < 16384 then
    put instNum div 128 into aNum
    put abstT2Str( 0 ) & "," & "B" & partHex & "00"  & num2Hex( aNum, 2 ) & return after resultHex -- bank select MSB( CC#0 = 0 )
    put abstT2Str( 1 ) & "," & "B" & partHex & "2000" & return after resultHex -- bank select LSB( CC#32 = 0 )
    put instNum mod 128 into aNum
    put abstT2Str( 2 ) & "," & "C" & partHex & num2Hex( aNum -1, 2 ) & return after resultHex -- program change( CN#12 )
  else -- drum part
    put abstT2Str( 0 ) & "," & "B" & partHex & "0000" & return after resultHex -- bank select MSB( CC#0 = 0 )
    put abstT2Str( 1 ) & "," & "B" & partHex & "2000" & return after resultHex -- bank select LSB( CC#32 = 0 )
    put instNum - 16384 into aNum
    put abstT2Str( 2 ) & "," & "C" & partHex & num2Hex( aNum -1, 2 ) & return after resultHex -- program change( CN#12 )
  end if
  put abstT2Str( 3 ) & "," & "B" & partHex & "5B00" & return after resultHex -- Reverb( CC#91 = 0 )
  put abstT2Str( 3 ) & "," & "B" & partHex & "0B7F" & return after resultHex -- Expression( CC#11 = 0x7F )
  put abstT2Str( 3 ) & "," & "B" & partHex & "0A40" & return after resultHex -- Panpot( CC#10 = 0x40 )
  --
  return resultHex
end getInitHex

function getInitHex aPart, instNum
  put "" into resultHex
  --
  put num2Hex( aPart, 1 ) into partHex
  put abstT2Str( 0 ) & "," & "B" & partHex & "0000"  & return after resultHex -- bank select MSB( CC#0 = 0 )
  put abstT2Str( 1 ) & "," & "B" & partHex & "2000" & return after resultHex -- bank select LSB( CC#32 = 0 )
  put abstT2Str( 2 ) & "," & "C" & partHex & num2Hex( instNum -1, 2 ) & return after resultHex -- program change( CN#12 )
  --
  put abstT2Str( 3 ) & "," & "B" & partHex & "5B00" & return after resultHex -- Reverb( CC#91 = 0 )
  put abstT2Str( 3 ) & "," & "B" & partHex & "0B7F" & return after resultHex -- Expression( CC#11 = 0x7F )
  put abstT2Str( 3 ) & "," & "B" & partHex & "0A40" & return after resultHex -- Panpot( CC#10 = 0x40 )
  --
  return resultHex
end getInitHex

function getMidiHeader trackSize
  put "" into aResult
  put "MThd" after aResult -- SMF marker
  put binaryEncode( "H*", "000000060000000100F0" ) after aResult -- SMF header
  put "MTrk" after aResult -- track marker
  put num2Bin( trackSize, 4 ) after aResult
  return aResult
end getMidiHeader

function num2DeltaTimeBin aNum
  put "" into aResult
  put numToByte( aNum mod 128 ) into aResult
  repeat 4
    put aNum div 128 into aNum
    put numToByte( 128 + ( aNum mod 128 ) ) before aResult
  end repeat
  return aResult
end num2DeltaTimeBin

function num2Bin aNum, nDigit
  put "" into aResult
  repeat nDigit
    put numToByte( aNum mod 256 ) before aResult
    put aNum div 256 into aNum
  end repeat
  return aResult
end num2Bin

function num2Hex aNum, nDigit
  put "" into theHex
  repeat nDigit
    get aNum mod 16
    put char it+1 of "0123456789ABCDEF" before theHex
    put aNum div 16 into aNum
  end repeat
  return theHex
end num2Hex

--

function getCopyrightBin notes
  put offset( "//c ", notes ) into aOfs
  if aOfs = 0 then return ""
  put line 1 of ( char aOfs+4 to aOfs+127+4 of notes ) into copyStr
  return binaryEncode( "H*", "00FF02" ) & numToByte( length( copyStr ) ) & copyStr
end getCopyrightBin

function getInfoBin notes
  put "" into infoBin
  repeat
    put offset( "//i ", notes ) into aOfs
    if aOfs = 0 then exit repeat
    put line 1 of ( char aOfs+4 to aOfs+127+4 of notes ) into aInfoStr
    put binaryEncode( "H*", "00FF01" ) & numToByte( length( aInfoStr ) ) & aInfoStr after infoBin
    delete char 1 to aOfs of notes
    delete first line of notes
  end repeat
  return infoBin
end getInfoBin

function getTimeSignBin notes
  put offset( "//s ", notes ) into aOfs
  if aOfs = 0 then return ""
  --
  put word 1 of line 1 of ( char aOfs+4 to aOfs+127+4 of notes ) into makeSmfWord
  --
  put getNum(4) into elem
  delete first char of makeSmfWord
  put getNum(4) into denom
  --
  put numToByte( elem ) into elimBin
  put 2 into denomiValue
  repeat with n = 1 to 32
    if ( denom +0 ) = 2 ^ n then
      put n into denomiValue
      exit repeat
    end if
    add 1 to n
  end repeat
  put numToByte( denomiValue ) into denomiBin
  --
  return binaryEncode( "H*", "00FF5804" ) & elimBin & denomiBin & binaryEncode( "H*", "1808" )
end getTimeSignBin

----------------end of makeSMF-------------
